@using Abp.Authorization.Users
@using MPM.FLP.Web.Startup
@model MPM.FLP.FLPDb.ExternalUsers
@{
    ViewData["Title"] = "User External";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    User External
                </h2>
                @*<ul class="header-dropdown m-r--5">
            <li class="dropdown">
                <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                    <i class="material-icons">more_vert</i>
                </a>
                <ul class="dropdown-menu pull-right">
                    <li><a id="RefreshButton" href="javascript:void(0);" class="waves-effect waves-block"><i class="material-icons">refresh</i>Refresh</a></li>
                </ul>
            </li>
        </ul>*@
            </div>
            <div class="body">
                <div class="form-group">
                    <button id="exportExcel" class="btn btn-warning" onclick="exportExcel()">Export Excel</button>
                    @*<button id="templateBtn" class="btn btn-info" onclick="downloadTemplate()">Download Template</button>*@
                    @*<button id="backToHwQuiz" class="btn btn-primary" onclick="backToIndex()">Homework Quiz</button>*@
                    @*<button type="submit" value="Submit" class="btn btn-primary">Submit</button>*@
                    @*<button asp-action="Index" class="btn btn-default">Kembali</button>*@
                </div>
                @(Html.Kendo().Grid<MPM.FLP.Services.Dto.ExternalUserDto>()
                              .Name("grid")
                              //.ToolBar(tools =>
                              //{
                              //    tools.Custom().Text("Tambah Kategori Apparel Baru").HtmlAttributes(new { Href = Url.Action("Create", "KategoriApparel") });
                              //})
                              .DataSource(dataSource => dataSource
                                  .Custom()
                                  .ServerFiltering(true)
                                  .Type("aspnetmvc-ajax")
                                  .Transport(transport => transport
                                                .Read(read => read.Action("Grid_Read", "ExternalUsers"))
                                    )
                                  .Schema(schema => schema
                                    .Model(m => m.Id("id"))
                                    .Parse(@<text>
                                                function(response) {
                                                return response.result;
                                                }
                                    </text>)
                       .Data("data")
                       .Total("total")
                       )
                     )
                  .Columns(columns =>
                  {
                      //columns.Template("<span>" + @counter++ + "</span>").Title("No.").Width(20);
                      //columns.Bound(typeof(string), "userName").Title("Username").Width(100);
                      columns.Bound(typeof(long), "abpUserId").Title("User Id").Width(200).Filterable(false);
                      columns.Bound(typeof(string), "name").Title("Nama").Width(200).Filterable(true);
                      columns.Bound(typeof(string), "channel").Title("Channel").Width(100).Filterable(false);
                      columns.Bound(typeof(string), "shopName").Title("Nama Toko").Width(300).Filterable(true);
                      columns.Bound(typeof(string), "shopImageurl").ClientTemplate(
              "#=GetMyImage(data.shopImageurl)#").Width(240)
            .Title("Gambar Toko").Filterable(false);
                      columns.Bound(typeof(string), "kTPImageUrl").ClientTemplate(
                  "#=GetMyImage(data.kTPImageUrl)#").Width(240)
                .Title("KTP").Filterable(false);
                      columns.Bound(typeof(string), "address").Title("Alamat").Width(400).Filterable(true);
                      columns.Bound(typeof(string), "email").Title("E-mail").Width(150).Filterable(true);
                      columns.Bound(typeof(string), "handphone").Title("No. Handphone").Width(150).Filterable(false);
                      columns.Bound(typeof(string), "jabatan").Title("Jabatan").Width(150).Filterable(true);
                      columns.Bound(typeof(string), "isKTPVerified").ClientTemplate(
              "#=ShowValue(data.isKTPVerified)#").HtmlAttributes(new { @class = "text-center", @style = "width:50px;" }).Filterable(false)
            .Title("Verifikasi KTP").Width(100).Filterable(false);
                      columns.Bound(typeof(string), "isActive").ClientTemplate(
              "#=ShowValue(data.isActive)#").HtmlAttributes(new { @class = "text-center", @style = "width:50px;" }).Filterable(false)
            .Title("Aktif").Width(100).Filterable(false);
                      columns.Command(commands =>{
                          commands.Custom("Edit").Text(" ").HtmlAttributes(new { @class = "btn btn-primary", @style = "color:white;", @title = "Ubah" }).IconClass("glyphicon glyphicon-cog").Click("goToEditPage");
                          //commands.Destroy().Text(" ").HtmlAttributes(new { @class = "btn btn-danger", @style = "color:black;", @title = "Hapus" }).IconClass("glyphicon glyphicon-trash");
                          //commands.Custom("Ubah").Click("goToEditPage");
                          //commands.Custom("Ubah Attachment").Click("goToAttachmentPage");
                          //commands.Destroy().Text("Hapus");
                      }).Width(200).Title("Aksi");
                  })
                   .Pageable()
                   .Sortable()
                   .Scrollable()
                   .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                    .ForString(str => str.Clear()
                        .IsEqualTo("Is equal to")
                        .Contains("Contains")
                    ))
                  )
                )

                <script>

                     function goToEditPage(e) {
                        e.preventDefault();
                        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                        window.location.href = '@Url.Action("Edit", "ExternalUsers")' + '/' + dataItem.abpUserId;
                    }

                    function exportExcel(e) {

                        window.location.href = '@Url.Action("ExportExcel", "ExternalUsers")';
                    }
                    function GetMyImage(image)
                    {
                       var returnString = 'No Image Found';

                            //just checking to see if we have a name for the image
                        if (image != null && image.length > 0) {
                            returnString = "<img class='image img-responsive' src=" + image + " title=" + image + " width='100' height='100' alt=" + image + " />";
                            return returnString;
                        } else
                            return "";
                    }
                    function ShowValue(value) {
                        if (value == true) {
                            return "<i class='glyphicon glyphicon-ok'/>";
                        } else {
                            return "<i class='glyphicon glyphicon-remove'/>";
                        }
                    }
                </script>

            </div>
        </div>
    </div>
</div>

