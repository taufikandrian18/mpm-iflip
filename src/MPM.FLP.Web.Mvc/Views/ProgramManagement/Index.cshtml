@using Abp.Authorization.Users
@using MPM.FLP.Web.Startup
@model MPM.FLP.FLPDb.SalesPrograms
@{
    ViewData["Title"] = "Manajemen Sales Program";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    Manajemen Sales Program
                </h2>
                @*<ul class="header-dropdown m-r--5">
            <li class="dropdown">
                <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                    <i class="material-icons">more_vert</i>
                </a>
                <ul class="dropdown-menu pull-right">
                    <li><a id="RefreshButton" href="javascript:void(0);" class="waves-effect waves-block"><i class="material-icons">refresh</i>Refresh</a></li>
                </ul>
            </li>
        </ul>*@
            </div>
            <div class="body">
                @(Html.Kendo().Grid<MPM.FLP.FLPDb.SalesPrograms>()
                              .Name("grid")
                              .ToolBar(tools =>
                              {
                                  tools.Custom().Text("Tambah Program Baru").HtmlAttributes(new { Href = Url.Action("Create", "ProgramManagement") });
                              })
                              .DataSource(dataSource => dataSource
                                  .Custom()
                                  .ServerFiltering(true)
                                  .Type("aspnetmvc-ajax")
                                  .Transport(transport => transport
                                                .Read(read => read.Action("Grid_Read", "ProgramManagement"))
                                                .Destroy(destroy => destroy.Action("Grid_Destroy", "ProgramManagement"))
                                    )
                                  .Schema(schema => schema
                                    .Model(m => m.Id("id"))
                                    .Parse(@<text>
                                                function(response) {
                                                return response.result;
                                                }
                                    </text>)
                         .Data("data")
                         .Total("total")
                         )
                       )
                    .Columns(columns =>
                    {
                        columns.Bound(typeof(DateTime), "creationTime").Title("Tanggal").ClientTemplate("#= data.creationTime ? kendo.toString(kendo.parseDate(data.creationTime), 'dd-MM-yyyy') : '' #").Width(120).Filterable(false);
                        columns.Bound(typeof(string), "title").Title("Judul").Filterable(true).Width(200).HtmlAttributes(new { style = "height: 150px;" }).Lockable(true).Locked(true);
                        columns.Bound(typeof(int), "readingTime").Title("Minimal Waktu Baca").Filterable(false).Width(120);
                        columns.Bound(typeof(long), "viewCount").Title("Jumlah Pembaca").Filterable(false).Width(120);
                        columns.Bound(typeof(string), "featuredImageUrl").ClientTemplate(
                "#=GetMyImage(data.featuredImageUrl)#").Width(150)
              .Title("Gambar").Filterable(false).HtmlAttributes(new { style = "height: 100px;" });
                        columns.Bound(typeof(string), "creatorUsername").Title("Pembuat").Filterable(false).Width(120);
                        columns.Bound(typeof(string), "isPublished").ClientTemplate(
                  "#=ShowValue(data.isPublished)#").HtmlAttributes(new { @class = "text-center", @style = "width:50px;" }).Filterable(false)
                .Title("Tampilkan?").Filterable(false).Width(120);
                        columns.Command(commands =>                                 {
                            commands.Custom("Edit").Text(" ").HtmlAttributes(new { @class = "btn btn-primary", @style = "color:white;", @title = "Ubah" }).IconClass("glyphicon glyphicon-cog").Click("goToEditPage");
                            commands.Custom("Attachment").Text(" ").HtmlAttributes(new { @class = "btn btn-warning", @style = "color:white;", @title = "Tautan" }).IconClass("glyphicon glyphicon-file").Click("goToAttachmentPage");
                            commands.Destroy().Text(" ").HtmlAttributes(new { @class = "btn btn-danger", @style = "color:white;", @title = "Hapus"}).IconClass("glyphicon glyphicon-trash");
                            //commands.Custom("Ubah").Click("goToEditPage");
                            //commands.Custom("Ubah Attachment").Click("goToAttachmentPage");
                            //commands.Destroy().Text("Hapus");
                        }).Width(250);
                    })
                 .Pageable()
                 .Sortable()
                 .Scrollable(s => s.Height("500"))
                 .Navigatable()
                 .Resizable(resize => resize.Columns(true))
                 .Filterable(filterable => filterable
                            .Extra(false)
                            .Operators(operators => operators
                            .ForString(str => str.Clear()
                                .IsEqualTo("Is equal to")
                                .Contains("Contains")
                            ))
                  )
                )

                <script>
                    function ShowValue(value) {
                        if (value == true) {
                            return "<i class='glyphicon glyphicon-ok'/>";
                        } else {
                            return "<i class='glyphicon glyphicon-remove'/>";
                        }
                    }
                    function goToEditPage(e) {
                        e.preventDefault();
                        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                        window.location.href = '@Url.Action("Edit", "ProgramManagement")' + '/' + dataItem.id;
                    }
                    function goToAttachmentPage(e) {
                        e.preventDefault();
                        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                        window.location.href = '@Url.Action("EditAttachment", "ProgramManagement")' + '/' + dataItem.id;
                    }
                    function GetMyImage(image)
                    {
                       var returnString = 'No Image Found'; 

                            //just checking to see if we have a name for the image 
                        if (image != null && image.length > 0) {
                            returnString = "<img class='image img-responsive text-center' src=" + image + " title=" + image + " width='100' height='100' alt=" + image + " />";
                            return returnString;
                        } else
                            return "";
                    }    
                </script>
                
            </div>
        </div>
    </div>
</div>

