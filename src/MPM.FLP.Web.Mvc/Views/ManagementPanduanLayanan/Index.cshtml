@using Abp.Authorization.Users
@using MPM.FLP.Web.Startup
@model MPM.FLP.FLPDb.Guides
@{
    ViewData["Title"] = "Management Panduan Layanan";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    Management Panduan Layanan
                </h2>
                @*<ul class="header-dropdown m-r--5">
            <li class="dropdown">
                <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                    <i class="material-icons">more_vert</i>
                </a>
                <ul class="dropdown-menu pull-right">
                    <li><a id="RefreshButton" href="javascript:void(0);" class="waves-effect waves-block"><i class="material-icons">refresh</i>Refresh</a></li>
                </ul>
            </li>
        </ul>*@
            </div>
            <div class="body">
                @(Html.Kendo().Grid<MPM.FLP.FLPDb.Guides>()
                             .Name("grid")
                             .ToolBar(tools =>
                                {
                                    tools.Custom().Text("Tambah Panduan Layanan Baru").HtmlAttributes(new { Href = Url.Action("Create", "ManagementPanduanLayanan") });
                                })
                             .DataSource(dataSource => dataSource
                           .Custom()
                           .ServerFiltering(true)
                           .Type("aspnetmvc-ajax")
                           .Transport(transport => transport
                                         .Read(read => read.Action("Grid_Read", "ManagementPanduanLayanan"))
                                         .Destroy(destroy => destroy.Action("Grid_Destroy", "ManagementPanduanLayanan"))
                             )
                           .Schema(schema => schema
                             .Model(m => m.Id("id"))
                             .Parse(@<text>
                                        function(response) {
                                        return response.result;
                                        }
                            </text>)
                            .Data("data")
                            .Total("total")
                            )
                  )
               .Columns(columns =>
               {
                   columns.Bound(typeof(string), "title").Title("Judul").Lockable(false).Width(200).Filterable(true);/*.Filterable(filter => filter.Cell(cell => cell.Operator("contains").SuggestionOperator(FilterType.Contains)));*/
                   //columns.Bound(typeof(string), "Contents").Title("Contents");
                   columns.Bound(typeof(int), "readingTime").Title("Minimal Waktu Baca").Filterable(false).Width(170).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(long), "viewCount").Title("Jumlah Pembaca").Width(100).Filterable(false);
                   columns.Bound(typeof(string), "featuredImageUrl")
                             .ClientTemplate("#=GetMyImage(data.featuredImageUrl)#").Width(200)
                             .Title("Gambar").Filterable(false).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(string), "order").Title("Urutan").Filterable(false).Width(80).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(DateTime), "creationTime").Title("Waktu Pembuatan").ClientTemplate("#= data.creationTime ? kendo.toString(kendo.parseDate(data.creationTime), 'dd-MM-yyyy') : '' #").Filterable(false).Width(150);
                   columns.Bound(typeof(string), "h1").ClientTemplate(
                  "#=ShowValue(data.h1)#").Filterable(false).Width(70).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(string), "h2").ClientTemplate(
           "#=ShowValue(data.h2)#").Filterable(false).Width(70).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(string), "h3").ClientTemplate(
           "#=ShowValue(data.h3)#").Filterable(false).Width(70).HtmlAttributes(new { @class = "text-center" });
                   columns.Bound(typeof(string), "isPublished").ClientTemplate(
                "#=ShowValue(data.isPublished)#")
              .Title("Tampilkan?").HtmlAttributes(new { @class = "text-center", @style = "width:50px;" }).Filterable(false).Width(100);
                   columns.Bound(typeof(string), "creatorUsername").Title("Pembuat").Filterable(false).Width(100);
                   columns.Command(commands =>                                 {
                       commands.Custom("Edit").Text(" ").HtmlAttributes(new { @class = "btn btn-primary", @style = "color:white;", @title = "Ubah" }).IconClass("glyphicon glyphicon-cog").Click("goToEditPage");
                       commands.Custom("Attachment").Text(" ").HtmlAttributes(new { @class = "btn btn-warning", @style = "color:white;", @title = "Tautan" }).IconClass("glyphicon glyphicon-file").Click("goToAttachmentPage");
                       //commands.Custom("Ubah").Click("goToEditPage");
                       //commands.Destroy().Text("Hapus");
                       commands.Destroy().Text(" ").HtmlAttributes(new { @class = "btn btn-danger", @style = "color:white;", @title = "Hapus"}).IconClass("glyphicon glyphicon-trash");
                   }).Width(250);
               })
               .Pageable(pager => pager
                   .Input(true)
                   .Numeric(false)
                   .Refresh(true))
               .Sortable()
               .Scrollable(s => { s.Height("500"); })
                        .Navigatable()
                        .Resizable(resize => resize.Columns(true))
               .Filterable(filterable => filterable
                    .Extra(false)
                    .Operators(operators => operators
                    .ForString(str => str.Clear()
                        .IsEqualTo("Is equal to")
                        .Contains("Contains")
                    ))
                  )
                //.Filterable(filter=>filter.Mode(GridFilterMode.Row))

                )

                <script>
                        function goToEditPage(e) {
                            e.preventDefault();
                            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                            window.location.href = '@Url.Action("Edit", "ManagementPanduanLayanan")' + '/' + dataItem.id;
                        }
                        function goToAttachmentPage(e) {
                            e.preventDefault();
                            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

                            window.location.href = '@Url.Action("EditAttachment", "ManagementPanduanLayanan")' + '/' + dataItem.id;
                        }
                        function ShowValue(value) {
                            if (value == true) {
                                return "<i class='glyphicon glyphicon-ok'/>";
                            } else {
                                return "<i class='glyphicon glyphicon-remove'/>";
                            }
                        }
                        function GetMyImage(image)
                        {
                            var returnString = 'No Image Found';

                            //just checking to see if we have a name for the image
                            if(image != null && image.length > 0)
                            {
                                returnString = "<img class='image img-responsive' src=" + image + " title=" + image + " width='100' height='100' alt=" + image + " />";
                                return returnString;
                            } else
                            return "";
                        }

                </script>
            </div>
        </div>
    </div>
</div>

